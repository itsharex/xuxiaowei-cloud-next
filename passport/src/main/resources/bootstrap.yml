#
# 此处与 Cookie 自定义有关系
spring.main.allow-bean-definition-overriding: true
---

# 服务器
server:
  # 端口
  port: ${passport_port:1401}
#
# Spring 配置
spring:
  application:
    name: passport
  # 配置环境
  profiles:
    # 激活
    active:
      - dev
  # Cloud 配置
  cloud:
    # 网络工具
    inetutils:
      # 将被忽略的网络接口的 Java 正则表达式列表。
      ignored-interfaces:
        # 正则表达式
        # 忽略 VMware 虚拟机网卡
        - VMware.*
        # 忽略 VirtualBox 虚拟机网卡
        - VirtualBox.*
    #
    # Nacos 配置
    nacos:
      # 服务发现
      discovery:
        # 服务发现地址
        server-addr: ${nacos_xuxiaowei_cloud_addr:nacos.example.next.xuxiaowei.cloud:8848}
        # 命名空间
        namespace:
        # 自定义注册IP（为空时使用程序自动获取本机IP）
        ip: ${passport_ip:}
      # 服务配置
      config:
        # 配置文件后缀名
        file-extension: yml
        # 配置服务器地址
        server-addr: ${nacos_xuxiaowei_cloud_addr:nacos.example.next.xuxiaowei.cloud:8848}
        # 命名空间
        namespace:
        # 共享配置
        shared-configs:
          - dataId: xuxiaowei.${spring.cloud.nacos.config.file-extension}
            # 是否支持刷新
            refresh: true


---
# 以下配置可放入 nacos 中


#
# 日志 配置
#
logging:
  # 日志等级
  level:
    # 在微服务中，直接使用 `web: debug` 无效
    # web: debug
    org.springframework.web: debug
    # 包：日志等级
    cloud.xuxiaowei: debug
  # 日志文件
  file:
    # 文件名及路径
    name: /logs/${spring.application.name}/${spring.application.name}.log
    # 文件最大大小，单位: org.springframework.util.unit.DataSize
    # 已废弃，推荐使用：logging.logback.rollingpolicy.max-file-size
    # max-size: 20MB
    # 日志保存天数
    # 已废弃，推荐使用：logging.logback.rollingpolicy.max-history
    # max-history: 365
  logback:
    rollingpolicy:
      # 文件最大大小，单位: org.springframework.util.unit.DataSize
      # 旧版使用：logging.file.max-size
      max-file-size: 20MB
      # 日志保存天数
      # 旧版使用：logging.file.max-history
      max-history: 365
      # 压缩文件命名
      # 后缀名中比原始配置添加了 `.log`，解压后方便打开看
      # 旧版使用：logging.pattern.rolling-file-name
      file-name-pattern: ${LOG_FILE}.%d{yyyy-MM-dd}.%i.log.gz
  # 格式
  pattern:
    # 压缩文件命名
    # 后缀名中比原始配置添加了 `.log`，解压后方便打开看
    # 已废弃，推荐使用：logging.logback.rollingpolicy.file-name-pattern
    # rolling-file-name: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.log.gz"
    # 控制台日志格式
    # 默认值："%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 增加了：%X{NAME} %clr(:){faint} %X{IP} %clr(:){faint} %X{REQUEST_ID} %clr(:){faint}
    # LOG_LEVEL_PATTERN：日志等级
    # -%5p：宽度
    # PID：线程
    console: "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %X{USERS_ID} %clr(:){faint} %X{NAME} %clr(:){faint} %X{IP} %clr(:){faint} %X{REQUEST_ID} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 日志文件格式
    # 默认值："%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 增加了：%X{NAME} : %X{IP} : %X{REQUEST_ID} :
    file: "%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %X{USERS_ID} : %X{NAME} : %X{IP} : %X{REQUEST_ID} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 日期时间格式
    dateformat: "yyyy-MM-dd HH:mm:ss.SSS"

# 管理服务
management:
  endpoints:
    web:
      exposure:
        include: '*'

# 数据库配置
spring:
  # 数据库
  datasource:
    dynamic:
      # 设置默认的数据源或者数据源组，默认值即为 master
      primary: master
      # 严格匹配数据源，默认false。true未匹配到指定数据源时抛异常，false使用默认数据源
      strict: true
      datasource:
        master:
          # 数据库 连接串
          # url: jdbc:mysql://${mysql_xuxiaowei_cloud:mysql.example.next.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database:xuxiaowei_cloud_next}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=GMT%2B8
          # 数据库 连接串 - 测试环境使用
          url: jdbc:p6spy:mysql://${mysql_xuxiaowei_cloud:mysql.example.next.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database:xuxiaowei_cloud_next}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=GMT%2B8
          # 数据库 用户名
          username: ${mysql_xuxiaowei_cloud_username:root}
          # 数据库 密码
          password: ${mysql_xuxiaowei_cloud_password:xuxiaowei.com.cn}
          # 数据库 驱动名称
          # driver-class-name: com.mysql.cj.jdbc.Driver # 3.2.0开始支持SPI可省略此配置
          # 数据库 驱动名称 - 测试环境使用
          driver-class-name: com.p6spy.engine.spy.P6SpyDriver
        log:
          # 数据库 连接串
          # url: jdbc:mysql://${mysql_xuxiaowei_cloud:mysql.example.next.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database_log:xuxiaowei_cloud_next_log}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=GMT%2B8
          # 数据库 连接串 - 测试环境使用
          url: jdbc:p6spy:mysql://${mysql_xuxiaowei_cloud:mysql.example.next.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database_log:xuxiaowei_cloud_next_log}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=GMT%2B8
          # 数据库 用户名
          username: ${mysql_xuxiaowei_cloud_username:root}
          # 数据库 密码
          password: ${mysql_xuxiaowei_cloud_password:xuxiaowei.com.cn}
          # 数据库 驱动名称
          # driver-class-name: com.mysql.cj.jdbc.Driver # 3.2.0开始支持SPI可省略此配置
          # 数据库 驱动名称 - 测试环境使用
          driver-class-name: com.p6spy.engine.spy.P6SpyDriver
#
# MyBatis Plus 配置
#
mybatis-plus:
  # MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置。
  # 必须配置（否则出现：org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)）
  # 父子项目中都有 xml 文件时，文件夹不能使用 *，xml文件名可使用 *
  mapper-locations:
    - classpath*:mapper/*/*.xml
  # MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，
  # 而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。
  type-aliases-package: cloud.xuxiaowei.next.*.entity
  global-config:
    db-config:
      # 逻辑已删除值,(逻辑删除下有效，默认值：1)
      logic-delete-value: 1
      # 逻辑未删除值,(逻辑删除下有效，默认值：0)
      logic-not-delete-value: 0
    # MyBatis 配置
  configuration:
    # 缓存
    cache-enabled: true

---

# Thymeleaf 配置
spring:
  thymeleaf:
    # 是否启用模板缓存。
    cache: false

---

# Redis 配置
spring:
  data:
    redis:
      database: ${redis_xuxiaowei_cloud_database:1}
      password: ${redis_xuxiaowei_cloud_password:xuxiaowei.com.cn}
      host: ${redis_xuxiaowei_cloud_host:redis.example.next.xuxiaowei.cloud}
      port: ${redis_xuxiaowei_cloud_port:6379}
---

# 记住我配置
cloud:
  remember-me:
    key: xuxiaowei.com.cn
    remember-me-cookie-domain: example.next.xuxiaowei.cloud

---

## QQ邮箱
## 不推荐使用：
## 1：无法撤销授权码，即使关闭后重开，之前的授权码一样可以使用
## 2：不稳定
#spring:
#  # [QQ邮箱-如何使用IMAP服务？](https://service.mail.qq.com/cgi-bin/help?subtype=1&id=28&no=331)
#  mail:
#    host: smtp.qq.com
#    username: ${qq_mail_username:}
#    password: ${qq_mail_password:}
#    port: ${qq_mail_port:587}
#    default-encoding: UTF-8
#    properties:
#      "[mail.smtp.socketFactoryClass]": javax.net.ssl.SSLSocketFactory
#      "[mail.debug]": ${qq_mail_debug:true}

# Microsoft Office 365
spring:
  # [在 Exchange Online 中启用或禁用经过身份验证的客户端 SMTP 提交 (SMTP AUTH)](https://learn.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/authenticated-client-smtp-submission)
  mail:
    host: smtp.office365.com
    username: ${microsoft_office_365_mail_username:}
    password: ${microsoft_office_365_mail_password:}
    port: ${microsoft_office_365_mail_port:587}
    default-encoding: UTF-8
    properties:
      # com.sun.mail.smtp.SMTPSendFailedException: 451 5.7.3 STARTTLS is required to send mail [SG2PR04CA0180.apcprd04.prod.outlook.com]
      "[mail.smtp.starttls.enable]": true
      "[mail.debug]": ${microsoft_office_365_mail_debug:true}


#
# JWK 配置
cloud:
  jwk:
    rsa:
      # 公钥
      public-key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvUEZbnpoYCSVveN8/h3ouADkX1l5/qpS/vaVuWMOMpVbWqiVysrL7x8NV0i0NKBf+Ufa0aJBMYtsRGTsKOGv4ulwoUCMDizZ47xCUVMR6JCbm3qVejeK5GWPatrRFPWXwIL5G4nk4ZkpEhFUn0qeJwEPG70QNxZDNJVIqbDK0CROZifd/7REy9SQjIsQbVjUmC2J09IXE4FK3YDIltUOJLf7ASnkIb5al/IelKLIkoYaiI4Jjw6/zK2QXwNaO74FSOIbxDM/yixrkuArtsrqLbxjw/BMlW5pLguTfbeXobbmS+t1MgIfCmWye5GXCsuuS+K/RElLmvBtT+o1xZNBowIDAQAB
      # 私钥
      private-key: MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC9QRluemhgJJW943z+Hei4AORfWXn+qlL+9pW5Yw4ylVtaqJXKysvvHw1XSLQ0oF/5R9rRokExi2xEZOwo4a/i6XChQIwOLNnjvEJRUxHokJubepV6N4rkZY9q2tEU9ZfAgvkbieThmSkSEVSfSp4nAQ8bvRA3FkM0lUipsMrQJE5mJ93/tETL1JCMixBtWNSYLYnT0hcTgUrdgMiW1Q4kt/sBKeQhvlqX8h6UosiShhqIjgmPDr/MrZBfA1o7vgVI4hvEMz/KLGuS4Cu2yuotvGPD8EyVbmkuC5N9t5ehtuZL63UyAh8KZbJ7kZcKy65L4r9ESUua8G1P6jXFk0GjAgMBAAECggEACYT7Qv/cPS3J7G3DbULS4GKHGja1eLZXi2Sa3mLZpXi2yiYdtsAhpusAcEoDanxAp5jSLGZFcjkJnp0W9e14O+kzFaFaCiJ+aUKgcVfE2FZhxV3So/2kOl3Ta3QLPUsnMXNFFXoHrcNW+gYuI/8MWnjmqiYF6Udw5PW3XHW8leCPSTL+XREhXvr42WbUdVJx5D0T1Kzxby3RhyM+sOfgnj0ItXeqcAnci7x/KyO7uN3lBYmn7uVluYdh08oB1sJ1/+FZy6CAmW3gR11HhpdSgJcdxmcK53Viv0LAM6zCR3o6YJePD/BB7vDS79OXNJwOX78iQ88demZLQWl8c7KOmQKBgQC//OuOnc9RjRaYqsrr2zPqDNpgw6lS3zSpao/oc1Q0asTH/QGFY/8E9ZYakMotultk2SzwaDUDk0MBxQlIMJUsz1pQHG1JvjESQ33wFyjUW1EGHp9d5EgdQ+QFB3Pnr1M+rSOT8lkMjkvkNsy1TADUSRpDXTQHtmVD91ecvxsR+wKBgQD8WtjdLnJBAtdMTlduh0eS7n8l+dmfz94lWs6QX0GEuHZyExPqHyVyyYje4kQ/8BOThVBJmzwAkbSJnjjY3dKf/aN3jagzUwp53nbcE0cj7Hbokx6WC49aHV7GOe1VxHQ1DLX3uxytICIzy4D3oRtOg2xXfEYNEKHdTXzTQS2meQKBgF9c2QChIH6Ij0XL6DmZS0MhmUNhTPTuC/FvDgZPau8SbaZM5PmF/wFOn32Yl+R44bbJLUpI6LRa7Hivj3m9MAvu/xQ12o87mpJQ1fhw+IXqyec5RL3Vi4CF3XgmCIt3iejjBX4SbesPr2CvW6VeGDdaDGKTpCmEju5gqLMiNecLAoGBAIBJHp2yEtsBurlLyh6iHryPCYwgq4UWgvOyaffytLfnni73i9Qk6UClOzMzC0cFoK4Jw3rns2UGrSSYjoWQnpY+tm78UFlnCZhSg1H1auDUQM6Sm6XjUoiZDajvobtMF1cwkwDQ2g8YmsqB1ZoNCHitTtJalrHllqON1LsAE1jhAoGAUNxiVF4GUu4DrW7Dpbdpocme1b5oj9jDaYXnkRBFYnlrX9vNGy2ctYEWHEIW7LFy374aGVgXFikkRjVxehCuoO+qt2wN/fQScFnQvMOjdRAnpInvCjoi5NfIBtKAU/Co7TgR6ogAFGh2NvTZYUmj9JoQ1Pd6v+1Qrm9Zsqz+vRE=



---

# 微信小程序配置
wechat:
  mini:
    program:
      default-role: wechat_miniprogram
      list:
        - appid: ${wx_miniapp_appid:}
          secret: ${wx_miniapp_secret:}

springdoc:
  # 关闭 springdoc kotlin 配置
  enable-kotlin: false

cloud:
  http-exchange:
    packages:
      - cloud.xuxiaowei.next.passport.web.service
